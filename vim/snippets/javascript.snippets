include html.snippets

# Syntax

snippet case
	case '${1:case}':
		${2:#:break;}
	${3}

snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});

snippet func
options word
	function ${1}(${2}) {${0}}

snippet func*
options word
	function* ${1}(${2}) {${0}}

snippet if
	if (${1:true}) {${0}}

snippet ife
	if (${1:true}) {${2}}
	else{${0}}

snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};

snippet return
alias   re
	return 

snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:#:break;}
		default:
			${2:// code}
	}

snippet ust
	'use strict';
	${1}

snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}

# DOM

snippet get
	getElementsBy${1:TagName}('${2}')${3}

snippet gett
	getElementBy${1:Id}('${2}')${3}

# console

snippet cd
	console.debug(${0:TARGET});
snippet ce
	console.error(${0:TARGET});
snippet cl
	console.log(${0:TARGET});

# ES6

snippet cls
abbr    class ... { ... }
	class ${1:class_name} {${2:TARGET}}

snippet constructor
	constructor(${1:arguments}) {
		${2:TARGET}
	}

snippet cst
alias   co
	const 

snippet de
	default 

snippet exp
	export 

snippet ext
	extends 

snippet fn
options word
abbr    (...) => {}
	(${1}) => {${2:TARGET}}

snippet imp
abbr    import ... from ...;
	import ${1:name} from ${2:module};${0}

snippet st
	static 
