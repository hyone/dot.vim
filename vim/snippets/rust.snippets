snippet enum
options head
abbr    enum ... {}
	enum ${1:#:type} {${0}}

snippet fn
abbr    fn ...(...) ... {}
	fn ${1:#:name}(${2:#:arguments})${3:#:return_type} {${0}}

snippet closure
alias   cl
abbr    |...|
options word
	|${1:#:arguments}| ${0}

snippet closure2
alias   cl2
abbr    |...| ... {}
options word
	|${1:#:arguments}|${2:#:return_type} {${0}}

snippet for
abbr    for ... in ... {}
	for ${1:#:var} in ${2:#:range} {${0}}

snippet if
abbr    if ... {}
	if ${1:#:condition} {${0}}

snippet elseif
abbr    else if ... {}
	else if ${1:#:condition} {${0}}

snippet else
abbr    else {}
	else {${0}}

snippet impl
options head
abbr    impl ... {}
	impl ${1:#:struct} {${0}}

snippet impl2
options head
abbr    impl ... for ... {}
	impl ${1:#:trait} for ${2:#:struct} {${0}}

snippet main
options head
abbr    fn main(...) {}
	fn main() {${0}}

snippet match
abbr    match ... {}
	match ${1:#:value} {${0}}

snippet mod
abbr    mod ... {}
	mod ${1:#:object} {${0}}

snippet while
abbr    while ... {}
	while ${1:#:condition} {${0}}

snippet .
options word
# if cursor is at start-of-line or before space, do not input prefix space
	`search('\(^\|\s\+\)\%#', 'bcn') ? '' : ' '`-> ${1}

snippet ,
options word
# if cursor is at start-of-line or before space, do not input prefix space
	`search('\(^\|\s\+\)\%#', 'bcn') ? '' : ' '`=> ${1}


snippet print!
abbr    print!(...)
	print!(${0})

snippet println!
alias   pr
abbr    println!(...)
	println!(${0})
